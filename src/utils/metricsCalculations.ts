
import type { Lead } from "@/types/lead";
import { calculateStandardizedMetrics, validateMetricsConsistency } from "@/utils/metricsDefinitions";

export function calculateMetrics(leads: Lead[]) {
  console.log('üîÑ [LEGACY] Fun√ß√£o calculateMetrics (usando m√©tricas padronizadas)');
  
  // Usar a fun√ß√£o padronizada
  const standardMetrics = calculateStandardizedMetrics(leads);
  
  // Validar consist√™ncia
  validateMetricsConsistency(standardMetrics);
  
  // Retornar no formato esperado pela interface (j√° compat√≠vel)
  const metrics = {
    ...standardMetrics,
    
    // Para retrocompatibilidade com c√≥digos antigos
    fechou: standardMetrics.fechados,
    agendados: standardMetrics.aSerAtendido,
    naoFecharam: standardMetrics.atendidoNaoFechou,
    perdidos: standardMetrics.perdidoInativo,
    naoApareceu: standardMetrics.perdidoInativo,
    desmarcou: standardMetrics.perdidoInativo,
    leadsAproveitaveis: standardMetrics.totalLeads,
    elegiveisParaComparecimento: standardMetrics.totalLeads,
    baseParaDesmarque: standardMetrics.totalLeads,
    
    // Grupos de status para debug
    statusGroups: {
      fechados: standardMetrics.fechados,
      aSerAtendido: standardMetrics.aSerAtendido,
      atendidoNaoFechou: standardMetrics.atendidoNaoFechou,
      perdidoInativo: standardMetrics.perdidoInativo,
      mentorados: standardMetrics.mentorados
    }
  };
  
  console.log('‚úÖ [LEGACY] M√©tricas calculadas usando defini√ß√µes padronizadas');
  console.log(`üéì [INFO] ${standardMetrics.mentorados} mentorados exclu√≠dos dos c√°lculos`);
  return metrics;
}
