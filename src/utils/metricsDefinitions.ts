
import type { Lead } from "@/types/lead";
import { getLeadsByStatusGroup, getLeadsExcludingMentorados, validateStatusClassification } from "@/utils/statusClassification";

export interface StandardizedMetrics {
  // Contadores b√°sicos
  totalLeads: number;
  fechados: number;
  aSerAtendido: number;
  atendidoNaoFechou: number;
  perdidoInativo: number;
  mentorados: number; // Adicionado para visibilidade
  
  // Grupos derivados
  apresentacoes: number; // Fechados + Atendidos N√£o Fecharam
  compareceram: number; // CORRE√á√ÉO: Apenas quem foi efetivamente atendido (fechados + atendidoNaoFechou)
  
  // Taxas padronizadas
  taxaFechamento: number; // Fechados / Apresenta√ß√µes
  taxaComparecimento: number; // CORRE√á√ÉO: Apresenta√ß√µes / Total (quem efetivamente compareceu)
  taxaDesmarque: number; // Perdidos/Inativos / Total
  aproveitamentoGeral: number; // Fechados / Total
  taxaNaoFechamento: number; // Atendidos N√£o Fecharam / Apresenta√ß√µes
  
  // Receitas
  receitaTotal: number;
  receitaCompleta: number;
  receitaRecorrente: number;
  vendasCompletas: number;
  vendasRecorrentes: number;
}

/**
 * DEFINI√á√ïES PADRONIZADAS PARA TODA A PLATAFORMA:
 * 
 * CORRE√á√ÉO CR√çTICA APLICADA: Taxa de Comparecimento agora representa apenas
 * quem EFETIVAMENTE foi atendido (fechados + atendidoNaoFechou), n√£o incluindo
 * leads "A Ser Atendido" que ainda est√£o no processo.
 * 
 * 1. GRUPOS DE STATUS (5 GRUPOS):
 *    - Fechado: Leads que compraram
 *    - A Ser Atendido: Leads no processo (Agendado, Confirmado, Remarcou, DCAUSENTE)
 *    - Atendido N√£o Fechou: Leads atendidos sem convers√£o (N√£o Fechou, Aguardando resposta)
 *    - Perdido/Inativo: Leads perdidos (Desmarcou, N√£o Apareceu, N√∫mero errado)
 *    - Mentorado: Leads mentorados (SEMPRE EXCLU√çDOS dos c√°lculos de convers√£o)
 * 
 * 2. GRUPOS DERIVADOS CORRIGIDOS:
 *    - Apresenta√ß√µes = Fechados + Atendidos N√£o Fecharam (quem foi efetivamente atendido)
 *    - Compareceram = Apresenta√ß√µes (MESMO VALOR - quem compareceu = quem foi atendido)
 * 
 * 3. F√ìRMULAS PADRONIZADAS CORRIGIDAS (sempre excluindo mentorados):
 *    - Taxa de Fechamento = Fechados / Apresenta√ß√µes
 *    - Taxa de Comparecimento = Apresenta√ß√µes / Total V√°lidos (% que efetivamente compareceu)
 *    - Taxa de Desmarque = Perdidos/Inativos / Total V√°lidos
 *    - Aproveitamento Geral = Fechados / Total V√°lidos
 *    - Taxa de N√£o Fechamento = Atendidos N√£o Fecharam / Apresenta√ß√µes
 *    - Taxa de N√£o Convers√£o = (Perdidos + N√£o Fecharam) / Total V√°lidos
 */

export function calculateStandardizedMetrics(leads: Lead[]): StandardizedMetrics {
  console.log('üîÑ [M√âTRICAS PADRONIZADAS] Calculando para', leads.length, 'leads BRUTOS');
  
  // 0. Validar classifica√ß√£o de status
  const validation = validateStatusClassification(leads);
  if (validation.unclassified > 0) {
    console.warn(`‚ö†Ô∏è [VALIDA√á√ÉO] ${validation.unclassified} leads n√£o puderam ser classificados`);
  }
  
  // 1. Agrupar por status usando classifica√ß√£o padr√£o (incluindo mentorados para contagem)
  const allStatusGroups = getLeadsByStatusGroup(leads, false);
  const mentorados = allStatusGroups.mentorado.length;
  
  // 2. CORRE√á√ÉO: Esta fun√ß√£o deve ser a √öNICA respons√°vel por filtrar mentorados
  const validLeads = getLeadsExcludingMentorados(leads);
  const statusGroups = getLeadsByStatusGroup(validLeads, true);
  
  console.log('‚úÖ [M√âTRICAS] Base de c√°lculo padronizada:');
  console.log(`  üìä Total original: ${leads.length}`);
  console.log(`  üéì Mentorados (SEMPRE exclu√≠dos): ${mentorados}`);
  console.log(`  ‚úÖ Base v√°lida para c√°lculo: ${validLeads.length}`);
  
  // 3. Contadores b√°sicos dos 4 grupos principais (excluindo mentorados)
  const totalLeads = validLeads.length;
  const fechados = statusGroups.fechado.length;
  const aSerAtendido = statusGroups.aSerAtendido.length;
  const atendidoNaoFechou = statusGroups.atendidoNaoFechou.length;
  const perdidoInativo = statusGroups.perdidoInativo.length;
  
  console.log('üìä [M√âTRICAS] Distribui√ß√£o dos 4 grupos v√°lidos:');
  console.log(`  ‚úÖ Fechados: ${fechados}`);
  console.log(`  ‚è≥ A Ser Atendido: ${aSerAtendido}`);
  console.log(`  üïê Atendido N√£o Fechou: ${atendidoNaoFechou}`);
  console.log(`  ‚ùå Perdido/Inativo: ${perdidoInativo}`);
  console.log(`  üìà Total V√°lidos: ${totalLeads} (verifica√ß√£o: ${fechados + aSerAtendido + atendidoNaoFechou + perdidoInativo})`);
  
  // 4. Grupos derivados CORRIGIDOS (DEFINI√á√ïES PADRONIZADAS)
  const apresentacoes = fechados + atendidoNaoFechou; // Leads que passaram por atendimento
  const compareceram = apresentacoes; // CORRE√á√ÉO: Compareceram = Apresenta√ß√µes (quem foi efetivamente atendido)
  
  console.log('üéØ [M√âTRICAS] Grupos derivados CORRIGIDOS:');
  console.log(`  üé™ Apresenta√ß√µes: ${apresentacoes} (${fechados} fechados + ${atendidoNaoFechou} n√£o fecharam)`);
  console.log(`  üë• Compareceram: ${compareceram} (MESMO que apresenta√ß√µes - quem efetivamente foi atendido)`);
  console.log(`  ‚è≥ A Ser Atendido: ${aSerAtendido} (ainda no processo, N√ÉO contam como comparecimento)`);
  
  // 5. C√°lculo de receitas
  const receitaCompleta = validLeads.reduce((sum, lead) => {
    const venda = lead['Venda Completa'];
    return sum + (typeof venda === 'number' ? venda : 0);
  }, 0);
  
  const receitaRecorrente = validLeads.reduce((sum, lead) => {
    const recorrente = lead.recorrente;
    return sum + (typeof recorrente === 'number' ? recorrente : 0);
  }, 0);
  
  const receitaTotal = receitaCompleta + receitaRecorrente;
  
  const vendasCompletas = validLeads.filter(lead => 
    lead['Venda Completa'] && lead['Venda Completa'] > 0
  ).length;
  
  const vendasRecorrentes = validLeads.filter(lead => 
    lead.recorrente && lead.recorrente > 0
  ).length;
  
  // 6. TAXAS PADRONIZADAS CORRIGIDAS (f√≥rmulas definitivas - sempre excluindo mentorados)
  const taxaFechamento = apresentacoes > 0 ? (fechados / apresentacoes) * 100 : 0;
  const taxaComparecimento = totalLeads > 0 ? (apresentacoes / totalLeads) * 100 : 0; // CORRE√á√ÉO: apresenta√ß√µes/total
  const taxaDesmarque = totalLeads > 0 ? (perdidoInativo / totalLeads) * 100 : 0;
  const aproveitamentoGeral = totalLeads > 0 ? (fechados / totalLeads) * 100 : 0;
  const taxaNaoFechamento = apresentacoes > 0 ? (atendidoNaoFechou / apresentacoes) * 100 : 0;
  
  // 7. VALIDA√á√ÉO EXTRA: Taxa de n√£o convers√£o para alertas
  const leadsNaoConvertidos = perdidoInativo + atendidoNaoFechou;
  const taxaNaoConversao = totalLeads > 0 ? (leadsNaoConvertidos / totalLeads) * 100 : 0;
  
  console.log('üìà [M√âTRICAS] Taxas padronizadas CORRIGIDAS (BASE √öNICA para todos os componentes):');
  console.log(`  üéØ Taxa de Fechamento: ${taxaFechamento.toFixed(1)}% (${fechados}/${apresentacoes})`);
  console.log(`  ‚úÖ Taxa de Comparecimento CORRIGIDA: ${taxaComparecimento.toFixed(1)}% (${apresentacoes}/${totalLeads}) - apenas quem foi efetivamente atendido`);
  console.log(`  ‚ùå Taxa de Desmarque: ${taxaDesmarque.toFixed(1)}% (${perdidoInativo}/${totalLeads})`);
  console.log(`  ‚ö° Aproveitamento Geral: ${aproveitamentoGeral.toFixed(1)}% (${fechados}/${totalLeads})`);
  console.log(`  üïê Taxa de N√£o Fechamento: ${taxaNaoFechamento.toFixed(1)}% (${atendidoNaoFechou}/${apresentacoes})`);
  console.log(`  üö® Taxa de N√£o Convers√£o: ${taxaNaoConversao.toFixed(1)}% (${leadsNaoConvertidos}/${totalLeads}) - para alertas`);
  
  // 8. Valida√ß√£o matem√°tica FINAL
  const somaComparecimentoASerAtendidoDesmarque = taxaComparecimento + ((aSerAtendido / totalLeads) * 100) + taxaDesmarque;
  const somaFechamentoNaoFechamento = taxaFechamento + taxaNaoFechamento;
  
  console.log('üîç [VALIDA√á√ÉO] Verifica√ß√µes matem√°ticas FINAIS:');
  console.log(`  Comparecimento + A Ser Atendido + Desmarque = ${somaComparecimentoASerAtendidoDesmarque.toFixed(1)}% (deve ser ~100%)`);
  console.log(`  Fechamento + N√£o Fechamento = ${somaFechamentoNaoFechamento.toFixed(1)}% (deve ser ~100%)`);
  console.log(`  ‚úÖ VALIDA√á√ÉO CR√çTICA: ${leadsNaoConvertidos} n√£o convertidos / ${totalLeads} total = ${taxaNaoConversao.toFixed(1)}%`);
  
  if (Math.abs(somaComparecimentoASerAtendidoDesmarque - 100) > 0.1) {
    console.warn('‚ö†Ô∏è [VALIDA√á√ÉO] ERRO: Comparecimento + A Ser Atendido + Desmarque n√£o soma 100%');
  }
  
  if (apresentacoes > 0 && Math.abs(somaFechamentoNaoFechamento - 100) > 0.1) {
    console.warn('‚ö†Ô∏è [VALIDA√á√ÉO] ERRO: Fechamento + N√£o Fechamento n√£o soma 100%');
  }
  
  const metrics: StandardizedMetrics = {
    // Contadores b√°sicos
    totalLeads,
    fechados,
    aSerAtendido,
    atendidoNaoFechou,
    perdidoInativo,
    mentorados,
    
    // Grupos derivados CORRIGIDOS
    apresentacoes,
    compareceram, // Agora √© igual a apresenta√ß√µes
    
    // Taxas padronizadas CORRIGIDAS
    taxaFechamento,
    taxaComparecimento, // Agora correta: apresenta√ß√µes/total
    taxaDesmarque,
    aproveitamentoGeral,
    taxaNaoFechamento,
    
    // Receitas
    receitaTotal,
    receitaCompleta,
    receitaRecorrente,
    vendasCompletas,
    vendasRecorrentes
  };
  
  console.log('‚úÖ [M√âTRICAS] C√°lculo padronizado FINAL conclu√≠do - TODAS AS INCONSIST√äNCIAS RESOLVIDAS');
  console.log(`üéì [EXCLUS√ÉO] Mentorados exclu√≠dos: ${mentorados} leads`);
  console.log(`üîß [CORRE√á√ÉO] Todas as taxas agora calculam corretamente com base em ${totalLeads} leads v√°lidos`);
  
  return metrics;
}

export function validateMetricsConsistency(metrics: StandardizedMetrics): boolean {
  const { totalLeads, fechados, aSerAtendido, atendidoNaoFechou, perdidoInativo } = metrics;
  
  // Verificar se a soma dos grupos bate com o total (excluindo mentorados)
  const somaGrupos = fechados + aSerAtendido + atendidoNaoFechou + perdidoInativo;
  if (somaGrupos !== totalLeads) {
    console.error(`‚ùå [VALIDA√á√ÉO] Soma dos grupos (${somaGrupos}) ‚â† Total V√°lidos (${totalLeads})`);
    return false;
  }
  
  // Verificar se comparecimento + A ser atendido + desmarque = ~100%
  const taxaASerAtendido = totalLeads > 0 ? (aSerAtendido / totalLeads) * 100 : 0;
  const somaTodasTaxas = metrics.taxaComparecimento + taxaASerAtendido + metrics.taxaDesmarque;
  if (Math.abs(somaTodasTaxas - 100) > 0.1) {
    console.error(`‚ùå [VALIDA√á√ÉO] Comparecimento + A Ser Atendido + Desmarque = ${somaTodasTaxas.toFixed(1)}% (deveria ser 100%)`);
    return false;
  }
  
  console.log('‚úÖ [VALIDA√á√ÉO] M√©tricas consistentes - BASE √öNICA VALIDADA');
  console.log(`üéì [INFO] ${metrics.mentorados} mentorados foram corretamente exclu√≠dos dos c√°lculos`);
  console.log(`üîß [VALIDA√á√ÉO EXTRA] Todas as porcentagens calculadas corretamente com base em ${totalLeads} leads`);
  return true;
}
